import React, { useState, useEffect } from "react";
import {
  Layout, Form, Input, Button, Table, Space, Modal, message, Select, DatePicker, Tag
} from "antd";
import {
  SearchOutlined, DeleteOutlined, CheckCircleOutlined, ReloadOutlined
} from "@ant-design/icons";
import {
  fetchInsurances,
  createInsurance,
  deleteInsurance,
  approveInsurance,
  renewInsurance,
  endInsurance,
  getInsuranceTypes,
  getEmployees,
  getNewInsuranceCode,
  fetchInsuranceById // ‚úÖ th√™m h√†m fetch chi ti·∫øt
} from "../../api/insuranceDetailApi";


const { Content } = Layout;
const { Option } = Select;

const InsuranceManagement = () => {
  const [form] = Form.useForm();
  const [insurances, setInsurances] = useState([]);
  const [employees, setEmployees] = useState([]);
  const [insuranceTypes, setInsuranceTypes] = useState([]);
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setLoading(true);
    try {
      const [bhRes, nvRes, lbhRes] = await Promise.all([
        fetchInsurances(),
        getEmployees(),
        getInsuranceTypes(),
      ]);

      if (bhRes.data?.Success) {
        const list = bhRes.data.Data.map((i) => ({
          id: i.Id,
          employeeName: i.TENNV,
          insuranceType: i.TENLBH,
          effectiveDate: i.NGAYBATDAU?.split("T")[0],
          endDate: i.NGAYKETTHUC?.split("T")[0] || "",
          status: i.TRANGTHAI
        }));
        setInsurances(list);
      }
      if (nvRes.data?.Data) setEmployees(nvRes.data.Data);
      if (lbhRes.data?.Data) setInsuranceTypes(lbhRes.data.Data);
    } catch (err) {
      message.error("L·ªói khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };

  const handleAddInsurance = async (values) => {
    setLoading(true);
    try {
        const payload = {
            MANV: values.employeeId,
            MALBH: values.insuranceTypeId,
            NGAYBATDAU: values.effectiveDate.format("YYYY-MM-DD"),
            TILETONG: values.tileTong.endsWith("%") ? values.tileTong : `${values.tileTong}%`,
            TILENV: values.tileNv.endsWith("%") ? values.tileNv : `${values.tileNv}%`,
            TILECTY: values.tileCty.endsWith("%") ? values.tileCty : `${values.tileCty}%`,  // ‚ö†Ô∏è B·ªï sung d√≤ng n√†y
            CHUKY: values.chuKy,
            TRANGTHAI: "Ch∆∞a ƒë√≥ng"
          };
          
  
      console.log("üì¶ Payload g·ª≠i l√™n:", payload); // G·ª° l·ªói
      const res = await createInsurance(payload);
  
      if (res.data?.Success) {
        message.success("Th√™m b·∫£o hi·ªÉm th√†nh c√¥ng");
        setIsModalOpen(false);
        form.resetFields();
        await loadData();
      } else {
        message.error(res.data?.Message || "L·ªói khi th√™m b·∫£o hi·ªÉm");
      }
    } catch (err) {
      console.error("‚ùå L·ªói g·ª≠i API:", err?.response?.data || err);
      message.error("L·ªói khi th√™m b·∫£o hi·ªÉm");
    } finally {
      setLoading(false);
    }
  };
  

  const handleApprove = async (id) => {
    setLoading(true);
    try {
      const detailRes = await fetchInsuranceById(id);
      const detail = detailRes.data?.Data;
  
      console.log("üì¶ D·ªØ li·ªáu chi ti·∫øt b·∫£o hi·ªÉm:", detail);
  
      const dto = {
        MANV: detail.MANV,
        MALBH: detail.MALBH,
        TILETONG: detail.TILETONG + "%",
        TILENV: detail.TILENV + "%",
        TILECTY: detail.TILECTY + "%",
        CHUKY: detail.CHUKY,
        NGAYBATDAU: detail.NGAYBATDAU,
        TRANGTHAI: "ƒê√£ ƒë√≥ng"
      };
  
      const res = await approveInsurance(id, dto);
  
      if (res.data?.Success) {
        message.success("Ph√™ duy·ªát th√†nh c√¥ng!");
        await loadData();
      } else {
        message.error(res.data?.Message || "Kh√¥ng th·ªÉ ph√™ duy·ªát b·∫£o hi·ªÉm.");
      }
    } catch (err) {
      console.error("‚ùå L·ªói ph√™ duy·ªát chi ti·∫øt:", err?.response?.data || err);
      message.error(err?.response?.data?.Message || "L·ªói khi ph√™ duy·ªát b·∫£o hi·ªÉm.");
    } finally {
      setLoading(false);
    }
  };
  
  

  const handleRenew = async (id) => {
    setLoading(true);
    try {
      const res = await renewInsurance(id);
      if (res.data?.Success) {
        message.success("Gia h·∫°n b·∫£o hi·ªÉm th√†nh c√¥ng");
        await loadData();
      } else {
        message.error(res.data?.Message || "L·ªói khi gia h·∫°n");
      }
    } catch {
      message.error("L·ªói khi gia h·∫°n b·∫£o hi·ªÉm");
    } finally {
      setLoading(false);
    }
  };

  const handleEnd = async (id) => {
    Modal.confirm({
      title: "X√°c nh·∫≠n k·∫øt th√∫c b·∫£o hi·ªÉm?",
      content: "Ch·ªâ b·∫£o hi·ªÉm ƒë√£ h·∫øt h·∫°n m·ªõi ƒë∆∞·ª£c x√≥a.",
      okText: "K·∫øt th√∫c",
      okType: "danger",
      cancelText: "H·ªßy",
      onOk: async () => {
        setLoading(true);
        try {
          const res = await endInsurance(id);
          if (res.data?.Success) {
            message.success("ƒê√£ k·∫øt th√∫c b·∫£o hi·ªÉm");
            await loadData();
          } else {
            message.error(res.data?.Message || "L·ªói khi k·∫øt th√∫c");
          }
        } catch {
          message.error("L·ªói khi k·∫øt th√∫c b·∫£o hi·ªÉm");
        } finally {
          setLoading(false);
        }
      }
    });
  };

  const columns = [
    {
      title: "T√™n nh√¢n vi√™n",
      dataIndex: "employeeName",
      key: "employeeName",
    },
    {
      title: "Lo·∫°i b·∫£o hi·ªÉm",
      dataIndex: "insuranceType",
      key: "insuranceType",
    },
    {
      title: "Hi·ªáu l·ª±c t·ª´",
      dataIndex: "effectiveDate",
      key: "effectiveDate",
    },
    {
      title: "Ng√†y k·∫øt th√∫c",
      dataIndex: "endDate",
      key: "endDate",
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      render: (status) => {
        let color = "default";
        if (status === "ƒê√£ ƒë√≥ng") color = "green";
        else if (status === "H·∫øt h·∫°n") color = "red";
        else if (status === "S·∫Øp h·∫øt h·∫°n") color = "gold";
        else if (status === "Ch∆∞a ƒë√≥ng") color = "orange";
        return <Tag color={color}>{status}</Tag>;
      }
    },
    {
      title: "T√πy ch·ªçn",
      key: "actions",
      render: (_, record) => (
        <Space>
          {record.status === "Ch∆∞a ƒë√≥ng" && (
            <Button icon={<CheckCircleOutlined />} onClick={() => handleApprove(record.id)}>Duy·ªát</Button>
          )}
          {record.status === "ƒê√£ ƒë√≥ng" && (
            <Button icon={<ReloadOutlined />} onClick={() => handleRenew(record.id)}>Gia h·∫°n</Button>
          )}
          {record.status === "H·∫øt h·∫°n" && (
            <Button icon={<DeleteOutlined />} danger onClick={() => handleEnd(record.id)}>X√≥a</Button>
          )}
        </Space>
      )
    }
  ];

  return (
    <Layout style={{ backgroundColor: "white" }}>
      <Content style={{ padding: 20 }}>
        <Space style={{ marginBottom: 20 }}>
          <Input
            placeholder="T√¨m ki·∫øm..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            prefix={<SearchOutlined />}
            style={{ width: 300 }}
          />
          <Button type="primary" onClick={() => setIsModalOpen(true)}>
            Th√™m b·∫£o hi·ªÉm
          </Button>
        </Space>

        <Table
          columns={columns}
          dataSource={insurances}
          rowKey="id"
          loading={loading}
          pagination={false}
        />

        <Modal
          title="Th√™m b·∫£o hi·ªÉm m·ªõi"
          open={isModalOpen}
          onCancel={() => setIsModalOpen(false)}
          footer={null}
        >
          <Form layout="vertical" form={form} onFinish={handleAddInsurance}>
            <Form.Item name="employeeId" label="T√™n nh√¢n vi√™n" rules={[{ required: true }]}> 
              <Select placeholder="Ch·ªçn nh√¢n vi√™n">
                {employees.map((nv) => (
                  <Option key={nv.MANV} value={nv.MANV}>{nv.TENNV}</Option>
                ))}
              </Select>
            </Form.Item>
            <Form.Item name="insuranceTypeId" label="Lo·∫°i b·∫£o hi·ªÉm" rules={[{ required: true }]}> 
              <Select placeholder="Ch·ªçn lo·∫°i b·∫£o hi·ªÉm">
                {insuranceTypes.map((lbh) => (
                  <Option key={lbh.MALBH} value={lbh.MALBH}>{lbh.TENLBH}</Option>
                ))}
              </Select>
            </Form.Item>
            <Form.Item name="effectiveDate" label="Ng√†y b·∫Øt ƒë·∫ßu" rules={[{ required: true }]}> 
              <DatePicker style={{ width: "100%" }} format="YYYY-MM-DD" />
            </Form.Item>
            <Form.Item name="tileTong" label="T·ªâ l·ªá t·ªïng (%)" rules={[{ required: true }]}> 
              <Input placeholder="VD: 10%" />
            </Form.Item>
            <Form.Item name="tileNv" label="T·ªâ l·ªá nh√¢n vi√™n (%)" rules={[{ required: true }]}> 
              <Input placeholder="VD: 5%" />
            </Form.Item>
            <Form.Item name="tileCty" label="T·ªâ l·ªá c√¥ng ty (%)" rules={[{ required: true }]}> 
              <Input placeholder="VD: 5%" />
            </Form.Item>
            <Form.Item name="chuKy" label="Chu k·ª≥ (VD: 3 th√°ng)" rules={[{ required: true }]}> 
              <Input />
            </Form.Item>
            <Form.Item style={{ textAlign: "right" }}>
              <Button type="primary" htmlType="submit" loading={loading}>Th√™m</Button>
            </Form.Item>
          </Form>
        </Modal>
      </Content>
    </Layout>
  );
};

export default InsuranceManagement;